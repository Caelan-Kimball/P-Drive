/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bounce;

import bouncers.Bouncer;
import bouncers.*;
import bouncers.Directions.*;
import java.awt.*;
import java.awt.event.*;
import java.util.Random;
import javax.swing.*;

/**
 *
 * @author 020022
 */
public class BouncePanel extends javax.swing.JPanel implements ActionListener {

    Random colors = new Random();
    //class variables
//    private int xPos;
//    private int yPos;
//    
//
//   
//    direction moving = direction.SE;
    Bouncer bouncing[] = new Bouncer[30];

    /**
     * Creates new form BouncePanel
     */
    public BouncePanel() {
        initComponents();
        Timer aniTime = new Timer(30, this);
        aniTime.start();
        // add Bouncers to the array
        bouncing[0] = new Bouncer_CaelanKimball();
//        bouncing[1] = new Bouncer_CaelanKimball();
//        bouncing[2] = new Bouncer_CaelanKimball();
//        bouncing[3] = new Bouncer_CaelanKimball();
//        bouncing[4] = new Bouncer_CaelanKimball();
//        bouncing[4].setX(300);
//        bouncing[1].setX(300);
//        bouncing[2].setX(300);
//        bouncing[3].setX(300);
        for (int idx = 0; idx < bouncing.length; idx++) {
            bouncing[idx] = new Bouncer();
        }

// add other Bouncers
        bouncing[0] = new Bouncer_MrKimball();
// first period CS1 2017-2018
        bouncing[1] = new Bouncer_DaneFleury();
        bouncing[2] = new Bouncer_Wesley();
       // bouncing[3] = new Bouncer_Travis();
        bouncing[4] = new Bouncer_Eliana();
        bouncing[5] = new Bouncer_Sean();
        bouncing[6] = new Bouncer_CaelanKimball();
        bouncing[7] = new Bouncer_Kade();
       // bouncing[8] = new Bouncer_JaredKing();
       // bouncing[9] = new Bouncer_Tylar();
       // bouncing[10] = new Bouncer_SweetBaden();
        bouncing[11] = new Bouncer_Eden();

// 8th period CS1 2017-2018
        bouncing[12] = new Bouncer_Rayne();
       // bouncing[13] = new Bouncer_Nick();
        bouncing[14] = new Bouncer_SethWilliams();
        bouncing[15] = new Bouncer_Osvaldo();
        bouncing[16] = new Bouncer_Luna();
       // bouncing[17] = new Bouncer_Kenzie();
        bouncing[18] = new Bouncer_Joseph();
        bouncing[19] = new Bouncer_Walker();
        bouncing[20] = new Bouncer_TY();
        bouncing[21] = new Bouncer_Leif();
        bouncing[22] = new Bouncer_Maldonado();
        bouncing[23] = new Bouncer_Luke();
        bouncing[24] = new Bouncer_JoseAyala();
       // bouncing[25] = new Bouncer_Adrian();
       // bouncing[26] = new Bouncer_Billy();
        bouncing[27] = new Bouncer_kriegen();

// change the Bouncer array size at the top of the Panel to match the number of bouncers listed
// add a loop to change positions and directions
        for (Bouncer b : bouncing) {

            b.setX((int) (Math.random() * this.getWidth()));
            b.setY((int) (Math.random() * this.getHeight()));
            int d = (int) (Math.random() * 4);
            if (d == 0) {
                b.setDirection(direction.SE);
            } else if (d == 1) {
                b.setDirection(direction.SW);
            } else if (d == 2) {
                b.setDirection(direction.NE);
            } else if (d == 3) {
                b.setDirection(direction.NW);
            }

        }

    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        drawFrame(g, getWidth(), getHeight());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 576, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 380, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void drawFrame(Graphics g, int width, int height) {
        for (Bouncer bo : bouncing) {
            bo.drawBouncer(g);
        }
        //repaint();
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        for (Bouncer b : bouncing) {
//        if (xPos < 0 && moving == direction.NW) {
//            moving = direction.NE;
//        } else if (xPos < 0 && moving == direction.SW) {
//            moving = direction.SE;
//        }

            if (b.getX() < 0 && b.getDirection() == direction.SW) {
                b.setDirection(direction.SE);
            } else if (b.getX() < 0 && b.getDirection() == direction.NW) {
                b.setDirection(direction.NE);
            }

            if (b.getX() > this.getWidth() - 25 && b.getDirection() == direction.SE) {
                b.setDirection(direction.SW);
            } else if (b.getX() > this.getWidth() - 25 && b.getDirection() == direction.NE) {
                b.setDirection(direction.NW);
            }

            if (b.getY() > this.getHeight() - 15 && b.getDirection() == direction.SE) {
                b.setDirection(direction.NE);
            } else if (b.getY() < 0 && b.getDirection() == direction.NE) {
                b.setDirection(direction.SE);
            }

            if (b.getY() > this.getHeight() - 15 && b.getDirection() == direction.SW) {
                b.setDirection(direction.NW);
            } else if (b.getY() < 0 && b.getDirection() == direction.NW) {
                b.setDirection(direction.SW);
            }

//        if (xPos > this.getWidth() - 25 && moving == direction.NE) {
//            moving = direction.NW;
//        } else if (xPos > this.getWidth() - 25 && moving == direction.SE) {
//            moving = direction.SW;
//        }
//        if (yPos > this.getHeight() - 25 && moving == direction.SE) {
//            moving = direction.NE;
//        } else if (yPos > this.getHeight() - 25 && moving == direction.SW) {
//            moving = direction.NW;
//        }
//        if (yPos < 0 && moving == direction.NE) {
//            moving = direction.SE;
//        } else if (yPos < 0 && moving == direction.NW) {
//            moving = direction.SW;
//        }
            b.update();
        }
        repaint();
    }

//    @Override
//    public void actionPerformed(ActionEvent e) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
