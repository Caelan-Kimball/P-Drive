/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bounce;

import java.awt.*;
import java.awt.event.*;
import java.util.Random;
import javax.swing.*;

/**
 *
 * @author 020022
 */
public class BouncePanel extends javax.swing.JPanel implements ActionListener {

    //class variables
    private int xPos;
    private int yPos;
    Random colors = new Random();

    enum direction {
        SE, SW, NW, NE
    };
    direction moving = direction.SE;

    /**
     * Creates new form BouncePanel
     */
    public BouncePanel() {
        initComponents();
        Timer aniTime = new Timer(30, this);
        aniTime.start();
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        drawFrame(g, getWidth(), getHeight());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 576, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 380, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void drawFrame(Graphics g, int width, int height) {
        g.setColor(new Color(210,180,140 ));
        g.fillOval(xPos, yPos, 25, 25);
        g.setColor(Color.WHITE);
        g.fillOval(xPos + 5, yPos + 10, 5, 5);
        g.setColor(Color.WHITE);
        g.fillOval(xPos + 15, yPos + 10, 5, 5);
        g.setColor(Color.WHITE);
        g.fillOval(xPos + 10, yPos + 5, 5, 5);
        g.setColor(Color.BLACK);
        g.fillOval(xPos + 9, yPos + 15, 7, 7);
        g.setColor(Color.BLACK);
        g.fillOval(xPos + 11, yPos + 6, 3, 3);
        //repaint();
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (xPos < 0 && moving == direction.NW) {
            moving = direction.NE;
        } else if (xPos < 0 && moving == direction.SW) {
            moving = direction.SE;
        }
        if (xPos > this.getWidth() - 25 && moving == direction.NE) {
            moving = direction.NW;
        } else if (xPos > this.getWidth() - 25 && moving == direction.SE) {
            moving = direction.SW;
        }
        if (yPos > this.getHeight() -25 && moving == direction.SE){
            moving = direction.NE;
        }
        else if (yPos > this.getHeight() -25 &&  moving == direction.SW){
            moving = direction.NW;
        }
        if (yPos < 0 && moving == direction.NE){
            moving = direction.SE;
        }
        else if (yPos < 0 &&  moving == direction.NW){
            moving = direction.SW;
        }
       switch (moving) {
            case SE:

                xPos += 5;
                yPos += 5;
                break;
            case SW:

                xPos -= 5;
                yPos += 5;
                break;
            case NW:

                xPos -= 5;
                yPos -= 5;
                break;
            case NE:

                xPos += 5;
                yPos -= 5;
                break;
                
                
        }
        repaint();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
